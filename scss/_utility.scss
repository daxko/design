.hide {
  display: none !important;
  visibility: hidden !important;
}

.display-inline,
.display-block,
.display-inline-block {
  visibility: visible !important;
}

.display-inline {
  display: inline !important;
}

.display-block {
  display: block !important;
}

.display-inline-block {
  display: inline-block !important;
}

// Display utility layouts for each breakpoint
@each $breakpoint in map-keys($responsive-breakpoints) {
  @media (min-width: map-get($responsive-breakpoints, $breakpoint)) {

    .hide-#{$breakpoint} {
      display: none !important;
      visibility: hidden !important;
    }

    .display-#{$breakpoint}-inline,
    .display-#{$breakpoint}-block,
    .display-#{$breakpoint}-inline-block {
      visibility: visible !important;
    }

    .display-#{$breakpoint}-inline {
      display: inline !important;
    }

    .display-#{$breakpoint}-block {
      display: block !important;
    }

    .display-#{$breakpoint}-inline-block {
      display: inline-block !important;
    }

  }
}

// Hide elements visually, only show them to screen readers
.sr-only {
  border: 0 none;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

.sticky {
  position: sticky;
  top: 0;
  z-index: z-index('sticky');
}

// Heads up! By using these float classes you will need to be sure it's in a container
// with the .cf class to clear content after the floated elements
.pull-left {
  float: left !important;
}

.pull-right {
  float: right !important;
}

// Text alignment utility
.text-left {
  text-align: left !important;
}

.text-center {
  text-align: center !important;
}

.text-right {
  text-align: right !important;
}